import os
import asyncio
import time
from collections import defaultdict
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)
from model_manager import AIModelManager, AIModelType

ai_model_manager = AIModelManager()

RATE_LIMIT_SECONDS = 1
user_last_message_time = defaultdict(lambda: 0)

MAX_CONCURRENT_API_CALLS = 10
MAX_QUEUE_SIZE = 200

api_queue = asyncio.Queue(maxsize=MAX_QUEUE_SIZE)

async def process_api_queue(worker_id):
    while True:
        user_id, user_text, update = await api_queue.get()
        try:
            print(f"[Worker {worker_id}] Processing request from {user_id}")
            start = time.time()
            response = await ai_model_manager.query_api_async(user_text)  # ‚Üê async –≤–∞—Ä–∏–∞–Ω—Ç
            elapsed = time.time() - start
            print(f"[Worker {worker_id}] Response in {elapsed:.2f}s")
            await update.message.reply_text(response)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            api_queue.task_done()

async def monitor_queue():
    while True:
        print(f"[Queue Monitor] Queue size: {api_queue.qsize()}")
        await asyncio.sleep(10)

async def start_queue_processing(application: ContextTypes.DEFAULT_TYPE):
    for i in range(MAX_CONCURRENT_API_CALLS):
        asyncio.create_task(process_api_queue(i))
    asyncio.create_task(monitor_queue())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["Help"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("Yo! I'm alive.", reply_markup=reply_markup)

async def models(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = "\n".join(
        f"{model.name}: {'–î–æ—Å—Ç—É–ø–Ω–∞' if ai_model_manager.model_limits[model] else '–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω'}"
        for model in ai_model_manager.model_limits
    )
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {ai_model_manager.current_model.name}\n–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π:\n{status}"
    )

async def handle_help_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="change_model"),
            InlineKeyboardButton("ü§ñ –î—Ä—É–≥–∏–µ –±–æ—Ç—ã", callback_data="other_bots"),
        ],
        [
            InlineKeyboardButton("üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å üëá", reply_markup=reply_markup)

async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    responses = {
        "change_model": "üîÑ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏: Gemini / Mistral / Pro (–µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)",
        "other_bots": "ü§ñ –ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ç–≤–æ–∏—Ö –±–æ—Ç–æ–≤",
        "how_to_use": "üí° –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ, –∞ —è –æ—Ç–≤–µ—á–∞—é ‚Äî –∫–∞–∫ —á–∞—Ç —Å –ò–ò. –û—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.",
    }
    await query.edit_message_text(responses.get(query.data, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï"))

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_text = update.message.text
    current_time = time.time()

    if current_time - user_last_message_time[user_id] < RATE_LIMIT_SECONDS:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É.")
        return
    user_last_message_time[user_id] = current_time

    if not any(ai_model_manager.get_api_key(model) for model in ai_model_manager.model_limits):
        await update.message.reply_text("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return

    if api_queue.full():
        await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ, –ø–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å üò∞")
        return

    await update.message.chat.send_action(action="typing")
    await api_queue.put((user_id, user_text, update))

def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is not set")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("models", models))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Help$"), handle_help_button))
    app.add_handler(CallbackQueryHandler(handle_inline_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.Regex("(?i)^help$"), handle_user_message))

    app.post_init = start_queue_processing

    app.run_polling()

if __name__ == "__main__":
    main()
