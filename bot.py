import os
import requests
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)
from telegram import Update, ReplyKeyboardMarkup

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–æ–π Help
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["Help"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "Yo! I'm alive.", reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Help ‚Äî —Ç–µ–ø–µ—Ä—å —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
async def handle_help_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="change_model"),
            InlineKeyboardButton("ü§ñ –î—Ä—É–≥–∏–µ –±–æ—Ç—ã", callback_data="other_bots"),
        ],
        [
            InlineKeyboardButton("üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å üëá", reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ Help
async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ

    if query.data == "change_model":
        await query.edit_message_text("üîÑ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏: Gemini / GPT / Pro (–µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)")
    elif query.data == "other_bots":
        await query.edit_message_text("ü§ñ –ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ç–≤–æ–∏—Ö –±–æ—Ç–æ–≤")
    elif query.data == "how_to_use":
        await query.edit_message_text("üí° –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ, –∞ —è –æ—Ç–≤–µ—á–∞—é ‚Äî –∫–∞–∫ —á–∞—Ç —Å –ò–ò. –û—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.")
    else:
        await query.edit_message_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï")

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini API —á–µ—Ä–µ–∑ requests
def query_gemini_api_sync(prompt: str, api_key: str) -> str:
    url = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent"
    headers = {
        "x-goog-api-key": api_key,
        "Content-Type": "application/json"
    }
    json_data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 256
        }
    }

    try:
        resp = requests.post(url, headers=headers, json=json_data, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        return data.get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini")
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API: {e}"

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç sync —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        await update.message.reply_text("API –∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    await update.message.chat.send_action(action="typing")

    response = await asyncio.to_thread(query_gemini_api_sync, user_text, api_key)
    await update.message.reply_text(response)

def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is not set")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Help$"), handle_help_button))
    app.add_handler(CallbackQueryHandler(handle_inline_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.Regex("(?i)^help$"), handle_user_message))
    
    app.run_polling()

if __name__ == "__main__":
    main()
